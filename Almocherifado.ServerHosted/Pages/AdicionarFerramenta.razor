@page "/AdicionarFerramenta"

@using InfraEstrutura.Repositorios
@using core
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Data.Models
@using AutoMapper
@using Blazored.FluentValidation


<Heading>Adicionar Nova Ferramenta</Heading>

<EditForm Model="ferramentamodel" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator />
    <Field>
        <FieldLabel>Nome Abreviado:</FieldLabel>
        <TextEdit @bind-Text="@ferramentamodel.NomeAbreviado" />
        <ValidationMessage For="() => ferramentamodel.NomeAbreviado" />
    </Field>
    <Field>
        <FieldLabel>Data de Compra:</FieldLabel>
        <DateEdit @bind-Date="ferramentamodel.DataCompra" TValue="DateTime" />
        <ValidationMessage For="() => ferramentamodel.DataCompra" />
    </Field>
    <Field>
        <FieldLabel>Foto:</FieldLabel>
        <FileEdit Changed="@OnChanged" AutoReset="false" Filter="image/*"></FileEdit>
        <ValidationMessage For="() => ferramentamodel.FotoUrl" />
    </Field>
    <Field>
        <FieldLabel>Descrição:</FieldLabel>
        <MemoEdit @bind-Text="ferramentamodel.Descrição" Rows="3"></MemoEdit>
        <ValidationMessage For="() => ferramentamodel.Descrição" />
    </Field>

    <Button Color="Color.Success" Type="ButtonType.Submit">Adicionar</Button>
</EditForm>


<Alert @ref="AlertRef" Margin="Margin.Is5.FromTop" Color="Color.Info">
    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
        Salvo
        <CloseButton />
    </Heading>
    <Paragraph>
        @mensagem
    </Paragraph>
    <Paragraph>
        <Button @onclick="() => AlertRef.Hide()" Color="@Cor">Ok</Button>
    </Paragraph>
</Alert>

@code{

    Alert AlertRef;
    string mensagem;
    Color Cor;

    FerramentaModel ferramentamodel = new() { DataCompra = DateTime.Now };
    [Inject] IFerramentaRepository repository { get; set; }
    [Inject] IMapper mapper { get; set; }
    [Inject] IWebHostEnvironment environment { get; set; }

    void OnValidSubmit()
    {

        var ferramenta = mapper.Map<Ferramenta>(ferramentamodel);

        repository.AdicionarFerramenta(ferramenta);

        Directory.CreateDirectory(Path.GetDirectoryName(environment.WebRootPath + ferramentamodel.FotoUrl));
        File.WriteAllBytes(environment.WebRootPath + ferramentamodel.FotoUrl, fileContent);

        mensagem = "Ferrramenta Criada Com sucesso!";
        Cor = Color.Success;
        AlertRef.Show();
    }


    byte[] fileContent;

    async Task OnChanged(FileChangedEventArgs e)
    {

        // A stream is going to be the destination stream we're writing to.
        using (var stream = new MemoryStream())
        {
            // Here we're telling the FileEdit where to write the upload result
            await e.Files.Single().WriteToStreamAsync(stream);

            // Once we reach this line it means the file is fully uploaded.
            // In this case we're going to offset to the beginning of file
            // so we can read it.
            //stream.Seek(0, SeekOrigin.Begin);
            fileContent = stream.ToArray();
            ferramentamodel.FotoUrl = $"\\fotos\\{DateTime.Now.ToFileTime()}.jpg";
        }
    }

}