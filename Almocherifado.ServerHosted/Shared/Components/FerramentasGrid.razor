@using Blazorise.DataGrid
@using InfraEstrutura.Repositorios
@using Almocherifado.Application
@using Almocherifado.core

<Row>
    <DataGrid TItem="Ferramenta" Data="Ferramentas" Filterable="true" 
        SelectedRowStyling="(Ferramenta, styling) => styling.Background = Background.None"
        RowStyling="OnRowStyling">
    <DataGridColumns>
        <DataGridCommandColumn TItem="Ferramenta">
            <DeleteCommandTemplate>
                <Button Color="Color.Danger" Clicked="() => OnDeleClicked(context)">Deletar Ferramenta</Button>
            </DeleteCommandTemplate>
        </DataGridCommandColumn>

        <DataGridColumn TItem="Ferramenta" Field="@nameof(Ferramenta.NomeAbreviado)" Caption="Nome">
            <DisplayTemplate>
                <Text>@context.NomeAbreviado</Text>
                <Heading Size="HeadingSize.Is6" Margin="Margin.Is2">Adquirida Em</Heading>
                <Text>@context.DataCompra</Text>
            </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn TItem="Ferramenta" Field="@nameof(Ferramenta.Marca)" Caption="Marca/Modelo">
            <DisplayTemplate>
                <Text>Marca: @context.Marca</Text>
                <Text>Modelo: @context.Modelo</Text>
            </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn TItem="Ferramenta" Field="@nameof(Ferramenta.FotoUrl)" Caption="Foto" Filterable="false">
            <DisplayTemplate>
                <Figure Size="FigureSize.Is128x128">
                    <FigureImage Source="@(pathHelper.Ferramentas_Url + context.FotoUrl)" />
                </Figure>
            </DisplayTemplate>
        </DataGridColumn>

        <DataGridColumn TItem="Ferramenta" Field="@nameof(Ferramenta.Descricao)" Caption="Descrição" />

        <DataGridColumn TItem="Ferramenta" Field="@nameof(Ferramenta.Descricao)" Caption="Alocada?">
            <DisplayTemplate>
                @if (context.Emprestada)
                {
                    @context.HistoricoEmprestimos.Where(fe => fe.DataDevolucao is null).Single().Emprestimo.Obra;
                }
                else
                {
                    <Switch  CheckedChanged="() => AdicionarOuRemoverFerramenta(context)"
                            Margin="Margin.IsAuto" Size="Size.Large" TValue="bool">Selecionar Para Nova Alocação</Switch>
                }
            </DisplayTemplate>
        </DataGridColumn>
    </DataGridColumns>
    </DataGrid>
</Row>

@code {

    [Inject] public IFerramentaRepository repository { get; set; }
    List<Ferramenta> Ferramentas { get; set; }
    [Inject] public IPathHelper pathHelper { get; set; }

    [Parameter] public List<Ferramenta> FerramentasChecadas { get; set; } = new();
    [Parameter] public EventCallback<List<Ferramenta>> FerramentasChecadasChanged { get; set; }

    private async Task OnFerramentasChecadasChanged(List<Ferramenta> ferramentas)
    {
        await FerramentasChecadasChanged.InvokeAsync(ferramentas);
    }

    void OnRowStyling(Ferramenta ferramenta, DataGridRowStyling styling)
    {
        if (ferramenta.Emprestada)
            styling.Background = Background.Info;
        else
            styling.Background = Background.Light;
    }

    async Task AdicionarOuRemoverFerramenta(Ferramenta ferramenta)
    {
        if (FerramentasChecadas.Contains(ferramenta))
            FerramentasChecadas.Remove(ferramenta);
        else
            FerramentasChecadas.Add(ferramenta);

        await OnFerramentasChecadasChanged(FerramentasChecadas);
    }

    async Task OnDeleClicked(CommandContext<Ferramenta> context)
    {
        repository.DeletarFerramenta(context.Item);
        await context.Clicked.InvokeAsync();
    }

    string getUrl(Ferramenta ferramenta)
    {
        return pathHelper.Ferramentas_Url + ferramenta.FotoUrl;
    }

    protected override void OnInitialized()
    {
        Ferramentas = repository.GetallFerramentas()
            .ToList();
    }

}
