@using BlazorDownloadFile
@using Append.Blazor.Printing
@using Almocherifado.ServerHosted.Services

@using Almocherifado.ServerHosted.Shared.FormularioCadastroImprestimo

<EditForm Model="Model" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
    <FluentValidationValidator />
    <DataDeEntrega @bind-Data="Model.entrega" />
    <ValidationMessage For="() =>Model.entrega"></ValidationMessage>

    <FuncionarioSelect FuncionariosSource="Funcionarios" @bind-ParentsCPF="Model.Funcionario" />
    <ValidationMessage For="() =>Model.Funcionario"></ValidationMessage>

    <ObraInput @bind-Obra="Model.Obra" />
    <ValidationMessage For="() =>Model.Obra"></ValidationMessage>

    @*<TermoResponsabilidade></TermoResponsabilidade>
        <ValidationMessage For="() => Model.TermoResponsabilidade"></ValidationMessage>*@

    <Button Type="ButtonType.Button" Color="Color.Info" @onclick="@(() => PrintingService.Print("api/termo") )">
        imprimir
    </Button>

    <Button Type="ButtonType.Submit" Color="Color.Success">Baixar Termo</Button>


</EditForm>

<a href="/fotos/Modelo de Responsabilidade de equipamentos.docx">baixar</a>


@code {
    [Inject] IBlazorDownloadFileService fileService { get; set; }
    [Inject] ITermoManager termoManager { get; set; }


    async Task  OnInvalidSubmit(EditContext editContext)
    {
        var mensagems = editContext.GetValidationMessages();
        bool FaltaSohTermo = mensagems.Where(m => !m.ToUpper().Contains("ferramenta".ToUpper())).All(m => m.ToUpper().Contains("responsabilidade".ToUpper()));

        if (FaltaSohTermo)
        {
            var funcionario = mapper.Map<Funcionario>(Model.Funcionario);
            var termopdf = termoManager.BuildTermo(Model.entrega, funcionario, Ferramentas, Model.Obra);

            if (termopdf.IsSuccess)
            {
                await PrintingService.Print(termopdf.Value);
            }

        }
    }

    void OnValidSubmit()
    {

    }

    [Parameter] public List<Ferramenta> Ferramentas { get; set; }
    EmprestimoModel Model = new() { entrega = DateTime.Now };
    [Inject] IFuncionariosRepository repository { get; set; }
    public List<FuncionarioModel> Funcionarios { get; set; }
    [Inject] IMapper mapper { get; set; }
    [Inject] IPrintingService PrintingService { get; set; }


    protected override void OnInitialized()
    {
        var funcionarios = repository.GetFuncionarios().ToList();
        Funcionarios = mapper.Map<List<FuncionarioModel>>(funcionarios);
    }



}
