@using BlazorDownloadFile
@using Append.Blazor.Printing
@using Almocherifado.ServerHosted.Services

@using Almocherifado.ServerHosted.Shared.FormularioCadastroImprestimo

<EditForm @ref="formulario" Model="Model" OnValidSubmit="OnValidSubmit">
    <FluentValidationValidator />
    <DataDeEntrega @bind-Data="Model.entrega" />
    <ValidationMessage For="() =>Model.entrega"></ValidationMessage>

    <FuncionarioSelect FuncionariosSource="Funcionarios" @bind-ParentsCPF="Model.Funcionario" />
    <ValidationMessage For="() =>Model.Funcionario"></ValidationMessage>

    <ObraInput @bind-Obra="Model.Obra" />
    <ValidationMessage For="() =>Model.Obra"></ValidationMessage>

    @*<TermoResponsabilidade></TermoResponsabilidade>
        <ValidationMessage For="() => Model.TermoResponsabilidade"></ValidationMessage>*@

    <Button Type="ButtonType.Button" Disabled="!PodePegarTermo()"  Color="Color.Info" @onclick="GetTermo">
        imprimir Termo
    </Button>
</EditForm>

@code {
    [Inject] IBlazorDownloadFileService fileService { get; set; }
    [Inject] ITermoManager termoManager { get; set; }
    [Inject] IJSRuntime JSRuntime { get; set; }

    EditForm formulario;

    bool PodePegarTermo()
    {
        var mensagems = formulario.EditContext.GetValidationMessages();
        bool FaltaSohTermo = mensagems.Where(m => !m.ToUpper().Contains("ferramenta".ToUpper()))
            .All(m => m.ToUpper().Contains("responsabilidade".ToUpper()));

        return FaltaSohTermo;
    }


    //async Task OnInvalidSubmit(EditContext editContext)
    //{


    //    if (FaltaSohTermo)
    //    {
    //        var funcionario = mapper.Map<Funcionario>(Model.Funcionario);
    //        var termopdf = termoManager.BuildTermo(Model.entrega, funcionario, Ferramentas, Model.Obra);

    //        if (termopdf.IsSuccess)
    //        {
    //            await PrintingService.Print(termopdf.Value);
    //        }

    //    }
    //}



    void OnValidSubmit()
    {

    }

    [Parameter] public List<Ferramenta> Ferramentas { get; set; }
    EmprestimoModel Model = new() { entrega = DateTime.Now };
    [Inject] IFuncionariosRepository repository { get; set; }
    public List<FuncionarioModel> Funcionarios { get; set; }
    [Inject] IMapper mapper { get; set; }
    [Inject] IPrintingService PrintingService { get; set; }


    protected override void OnInitialized()
    {
        var funcionarios = repository.GetFuncionarios().ToList();
        Funcionarios = mapper.Map<List<FuncionarioModel>>(funcionarios);
    }

    async Task GetTermo()
    {
        var funcionario = mapper.Map<Funcionario>(Model.Funcionario);
        var termopdf = termoManager.BuildTermo(Model.entrega, funcionario, Ferramentas, Model.Obra);

        if (termopdf.IsSuccess)
            await PrintingService.Print(termopdf.Value);
        else
            await JSRuntime.InvokeAsync<object>("Alert", "Falha Na alocação das ferramentas: " + termopdf.Error);

    }

}
