@page "/"

@using Almocherifado.ServerHosted.Shared.FormularioCadastroImprestimo

<EditForm Model="Model">
    <FluentValidationValidator />
    <DataDeEntrega @bind-Data="Model.entrega" />
    <ValidationMessage For="() =>Model.entrega"></ValidationMessage>

    <FuncionarioSelect FuncionariosSource="Funcionarios" @bind-ParentsCPF="Model.FuncionarioCpf" />
    <ValidationMessage For="() =>Model.FuncionarioCpf"></ValidationMessage>

    <ObraInput  @bind-Obra="Model.Obra"/>
    <ValidationMessage For="() =>Model.Obra"></ValidationMessage>
    
    <TermoResponsabilidade  @bind-Url="@Model.TermoResponsabilidade" />
    <ValidationMessage For="() =>Model.TermoResponsabilidade"></ValidationMessage>

    <Button Type="ButtonType.Submit" Color="Color.Primary">Alocar Ferramentas</Button>
    <Button Type="ButtonType.Reset" Color="Color.Light">Cancelar</Button>

</EditForm>


<p>@Model.TermoResponsabilidade</p>

@code {
    EmprestimoModel Model = new() { entrega = DateTime.Now };
    [Inject] IFuncionariosRepository repository { get; set; }
    public List<Funcionario> Funcionarios { get; set; }
    [Inject] IMapper mapper { get; set; }

    protected override void OnInitialized()
    {
        Funcionarios = repository.GetFuncionarios().ToList();
    }

    void OnValidSubmit()
    {
        var emprestimo = mapper.Map<Ferramenta>(Model);
        //repository.AdicionarFerramenta(ferramenta);

        //Directory.CreateDirectory(Path.GetDirectoryName(environment.WebRootPath + ferramentamodel.FotoUrl));
        //File.WriteAllBytes(environment.WebRootPath + ferramentamodel.FotoUrl, fileContent);

        //mensagem = "Ferrramenta Criada Com sucesso!";
        //Cor = Color.Success;
        //AlertRef.Show();
    }

}
